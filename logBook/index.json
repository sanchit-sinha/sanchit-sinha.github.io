[{"content":"Eulerian Path An eulerian path(or Eulerian trail) is a path of edges that visits all the edges in a graph exactly once.\nChecking if there is an Eulerian Path Calculate the in and out degree for each vertices, and an eulerian path exists if and only if the number of vertices with degree 1 is exactly 2 or 0. You can start dfs to find the path with the node having out degree - in degree = 1, and end on the one having in degree - out degree = 1 in case it exists, else you can start with any node.\nEulerian Circuit An eulerian circuit(or Eulerian cycle) is an eulerian path which starts and ends on the same vertex.\nChecking if there is an Eulerian Cycle Calculate the in and out degree for each vertices, and an eulerian cycle exists if and only if the number of in degrees at every node equals the out degrees.\nYou can start dfs to find the cycle with any node.\nImplementation vector\u0026lt;int\u0026gt; EulerPath; int in[N], out[N]; void dfs_EulerPath(int node) { while (out[node]) { dfs_EulerPath(v[node][--out[node]]); } EulerPath.push_back(node); } bool findEulerianPath(int n) { /* 1: if its possible to find a eulerPath */ // calculate the in and out degree for each node \tfor (int i = 1; i \u0026lt;= n; i++) for (int j = 0; j \u0026lt; (int)v[i].size(); j++) in[v[i][j]]++, out[i]++; // check if its possible to find euler path or not \tbool ok = 1; int numStartNode = 0, numEndNode = 0; for (int i = 1; i \u0026lt;= n; i++) { if (out[i] - in[i] \u0026gt; 1 || in[i] - out[i] \u0026gt; 1) ok = 0; else if (out[i] - in[i] == 1) numStartNode++; else if (in[i] - out[i] == 1) numEndNode++; } if (ok) ok = ((numEndNode == 0 \u0026amp;\u0026amp; numStartNode == 0) || (numEndNode == 1 \u0026amp;\u0026amp; numStartNode == 1)); if (!ok) return false; int node = 1; for (int i = 1; i \u0026lt;= n; i++) if (out[i] - in[i] == 1) node = i; dfs_EulerPath(node); return true; } Practice    S.No PLATFORM TASK SOLUTION     1. LeetCode Cracking the Safe Solution   2. CSES Mail Delivery -   3. CSES Teleporters Path -    ","permalink":"https://sanchit-sinha.github.io/logBook/posts/cp/eulerian-path/","summary":"Short notes on Eulerian Paths","title":"Eulerian Path"},{"content":"Heaps  A binary heap is like a completely filled binary tree with the bottom-most levels differing by at most $1$. The bottom-most level is generally filled from the left to the right. This case results in a maximum subtree size of $\\frac{2 n}{3}$. This is the worst time complexity for heapify as well: $O(\\frac{2n}{3})$.   ROOT L R / \\ / \\ / \\ / \\ ----- ----- ***** Let k be the number of nodes in R. The number of nodes in L is k + (k + 1) = 2k + 1. The total number of nodes is n = 1 + (2k + 1) + k = 3k + 2 (root plus L plus R). The ratio is (2k + 1)/(3k + 2), which is bounded above by 2/3. No constant less than 2/3 works, because the limit as k goes to infinity is 2/3 Types of heap Max heap  The node value is always greater than or equal to its children’s node value This results in root being the maximum element amongst all others  Min heap  The node value is always smaller than or equal to its children’s node values This results in root being the smallest element amongst all  Properties  Height of a heap is the longest simple path from root to bottom-most leaf(basically leftmost leaf) Heaps are also used to implement priority queues.  Basic Operations wrt max heap Max heapify  Runs in O(logn). It helps to maintain the heapify property It assumes that both the child of nodes are already heaps  Build max heap  Runs in O(n) to produce a max heap from an input array This is called in a bottom-up fashion. Firstly we assume that the last $\\frac{n}{2}$ nodes are heaps. Then as we iterate through the other nodes(right to left) we try maintaining the heap property by calling the heapify function.  Heapsort  Runs in O(nlogn) time and sorts an array inplace Place the root value at the last position and decrement the last position to be filled. Heapify the array Repeat the process Now you will notice that the same array is modified into a sorted array. (As we are not removing the last element)  Implementation details #include\u0026#34;bits/stdc++.h\u0026#34;using namespace std; #define ll long long const int N = 1e5 + 11; // Max Size of heap  ll tree[N], len = 1; // tree : heap ll A[N], n; void levelorder(int node) { queue\u0026lt;pair\u0026lt;ll, ll\u0026gt;\u0026gt; q; q.push({node, tree[node]}); while (!q.empty()) { auto p = q.front(); ll cur = p.first; cout \u0026lt;\u0026lt; p.second \u0026lt;\u0026lt; \u0026#34; \u0026#34;; q.pop(); ll left = 2 * cur, right = 2 * cur + 1; if (left \u0026lt; len) q.push({left, tree[left]}); if (right \u0026lt; len) q.push({right, tree[right]}); } return; } // 0 - indexed : (\u0026gt;= max heap) bool func(ll rootValue, ll childValue) { return rootValue \u0026gt;= childValue; } // works in log(n) and assumes that both the left and right child are heaps themselves void Heapify(int node) { int largest = max(node, 1); int left = 2 * node, right = 2 * node + 1; if (left \u0026lt; len \u0026amp;\u0026amp; func(tree[left] , tree[largest])) largest = left; if (right \u0026lt; len \u0026amp;\u0026amp; func(tree[right] , tree[largest])) largest = right; if (largest != node) { swap(tree[largest], tree[node]); Heapify(largest); } return; } void insert(ll val) { tree[len] = val; int node = len; len++; while (node) { int parent = node / 2; if (parent \u0026amp;\u0026amp; func(tree[node], tree[parent])) { // bigger node is pushed upward \tswap(tree[node], tree[parent]); node = parent; } else break; } Heapify(max(node , 1)); // calling heapify from node ensures that its child are already heap } void deleteNode(int node) { swap(tree[node], tree[len - 1]); tree[len - 1] = 0; len--; while (node) { int parent = node / 2; if (parent \u0026amp;\u0026amp; func(tree[node], tree[parent])) { // bigger node is pushed upward \tswap(tree[node], tree[parent]); node = parent; } else break; } Heapify(max(node , 1)); // calling heapify from node ensures that its child are already heap } // moves in bottom-up manner as this guarantees that whenever we apply heapify, the left and right child are heaps void buildHeap() { len = n + 1; for (int i = 0; i \u0026lt; n; i++) tree[i + 1] = A[i]; for (int i = n / 2; i \u0026gt;= 1; i--) { Heapify(i); } } void HeapSort(int node = 1) { while (len \u0026gt; 1) { int root = 1; swap(tree[root], tree[len - 1]); len--; Heapify(root); } } ll peek() { if (len \u0026lt;= 1) return -1; return tree[1]; } ll extract() { if (len \u0026lt;= 1) return -1; ll temp = tree[1]; deleteNode(1); return temp; } bool validateHeap(int node = 1) { if (node * 2 \u0026lt; len \u0026amp;\u0026amp; !func(tree[node] , tree[node * 2])) return 0; if (node * 2 + 1 \u0026lt; len \u0026amp;\u0026amp; !func(tree[node] , tree[node * 2 + 1])) return 0; bool ok = 1; if (node * 2 \u0026lt; len \u0026amp;\u0026amp; !validateHeap(node * 2)) ok = 0; if (node * 2 + 1 \u0026lt; len \u0026amp;\u0026amp; !validateHeap(node * 2 + 1)) ok = 0; return ok; } bool isempty() { return (len \u0026lt;= 1); } mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); ll range(ll l , ll r) { ll n = uniform_int_distribution\u0026lt;int\u0026gt; (l , r)(rng); return n; } int main() { /* n = 6; A[0] = 3; A[1] = 9; A[2] = 2; A[3] = 1; A[4] = 4; A[5] = 5; cout \u0026lt;\u0026lt; \u0026#34;ARRAY\\n\u0026#34;; for (int i = 0; i \u0026lt; n; i++) cout \u0026lt;\u0026lt; A[i] \u0026lt;\u0026lt; \u0026#34; \u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; buildHeap(); cout \u0026lt;\u0026lt; \u0026#34;leftOrder: \u0026#34;; levelorder(1); // 9 4 5 1 3 2 cout \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;Inserted node value \u0026#34; \u0026lt;\u0026lt; 7 \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; insert(7); cout \u0026lt;\u0026lt; \u0026#34;leftOrder: \u0026#34;; levelorder(1); // 9 4 7 1 3 2 5 cout \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;Tree\\n\u0026#34;; for (int i = 1; i \u0026lt; len; i++) cout \u0026lt;\u0026lt; tree[i] \u0026lt;\u0026lt; \u0026#34; \u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; int index = 5; cout \u0026lt;\u0026lt; \u0026#34;Deleted node at \u0026#34; \u0026lt;\u0026lt; index \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; tree[index] \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; deleteNode(index); cout \u0026lt;\u0026lt; \u0026#34;leftOrder: \u0026#34;; levelorder(1); // 9 5 7 1 4 2 cout \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; cout \u0026lt;\u0026lt; peek() \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; cout \u0026lt;\u0026lt; extract() \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; cout \u0026lt;\u0026lt; peek() \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;leftOrder: \u0026#34;; levelorder(1); // 7 5 2 1 4 cout \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; */ int iters = 20; while (iters--) { int x = range(0, 1); int n = range(1, 50); if (x == 0) insert(n); else extract(); if (validateHeap()) { // cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; n \u0026lt;\u0026lt; \u0026#34; : \u0026#34; \u0026lt;\u0026lt; len \u0026lt;\u0026lt; \u0026#34;levelorder: \u0026#34;; \t// levelorder(1); \t// cout \u0026lt;\u0026lt; \u0026#34;\\n\\n\u0026#34;; \t} else { cout \u0026lt;\u0026lt; \u0026#34;false\\nlevelorder: \u0026#34;; levelorder(1); exit(1); } assert(validateHeap()); } cout \u0026lt;\u0026lt; \u0026#34; levelorder: \u0026#34; ; levelorder(1); cout \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; int sz = len; HeapSort(); cout \u0026lt;\u0026lt; sz - 1 \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; for (int i = 1; i \u0026lt; sz; i++) cout \u0026lt;\u0026lt; tree[i] \u0026lt;\u0026lt; \u0026#34; \u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; } ","permalink":"https://sanchit-sinha.github.io/logBook/posts/dsa/heaps/","summary":"Short notes on Heaps","title":"Heaps"},{"content":"The Theory of C++ Basics of C++  cpp-programming/variables-literals\n Variables: In programming, a variable is a container (storage area) to hold data. They can-not be keywords.\nLiterals: Literals are data used for representing fixed values like integer, character, strings and floating numbers.\nConstants: Their values cannot change. Certain variables defined using consts or #define can also act as constants.\nBasic Input/Output  cpp-programming/input-output\n cout  The cout object in C++ is an object of class ostream. It is defined in the iostreamheader file. It is used to display the output to the standard output device i.e. monitor. It is associated with the standard C output stream stdout. The data needed to be displayed on the screen is inserted in the standard output stream (cout) using the insertion operator(\u0026lt;\u0026lt;). cout sends formatted output to standard output devices, such as the screen We first include the iostream header file that allows us to display output. The cout object is defined inside the std namespace. To use the std namespace, we used the using namespace std; statement.  cin  In C++, cin takes formatted input from standard input devices such as the keyboard. We use the cin object along with the \u0026raquo; operator for taking input  Functions  cpp-programming/default-argument\n Function Prototype  declaration of a function that specifies the function’s name and type signature (input/output of the function without the function body)  Function overloading  Functions having same name but different input parameters/arguments In C++, many built-in functions like sqrt are overloaded.  Default Parameters  Default arguments can also be provided to functions which will get over-written once the function is called with any proper argument. Once, we provide a default argument to function, then all the subsequent parameters must also have a default value.  Storage class  cpp-programming/storage-class\n Local variable/Automatic variables  Local Variables defined within a function that is, their scope is limited to a function. They end as soon as the function exits.  Global Variables  These variables are defined outside of all the functions Their scope is the entire program that is they end when the program ends  Static Local Variable  It exists and can be used only within certain functions where defined. Unlike local variables it maintains its value throughout the program,  Register variables  It is no longer used after C++11 These are similar to local variables but are a bit faster, that is they store variables in the processor\u0026rsquo;s register(small set of data holding capacity in CPU) instead of processor’s memory.  Thread local storage  Variables are allocated such that there is one instant of variable per thread  Return by reference  cpp-programming/return-reference\n  We return the return type of functions by reference These functions cannot return local variables or constants, they should return global variables.  Structures  cpp-programming/structure\n  It is a collection of variables of different data types. When a structure is created no memory is allocated. Memory is allocated only when the variable is defined. Structure can be thought of only as a blueprint. The members of the structure are accessed using dot[.]. This [.] is used to access the child object directly.  Using Pointers in Structures  cpp-programming/structure-pointer\n  If we define an address of a structure using pointers, we will still not be able to access the elements of the structure as we have not allocated any memory to them. struct_name * var_name = new struct_name(). This is similar to malloc, that is it allocates memory to the pointer created.  C++ Enumerations  cpp-programming/enumeration\n  User defined data-type which assigns constants to global variables. By default the value is given in the order [0,1,2…] An enum variable takes only value denied in the enumeration.  Class  cpp-programming/object-class\n Class  Contains all the related data and functions at one place It is a blueprint of the object. For example Sketch of a house is a class and the house itself is an object It is created using the keyword class and has private and public keywords.  Public  Members defined within the public can be accessed from anywhere within the program.  Private  Members defined within the private can be accessed only within the class.  Constructors  cpp-programming/constructors\n  Has the same name as that of the class, doesn’t have any return type and is public.  Default Constructor  Constructor having no parameters is the default constructor. It is called as soon as the variable is defined.  Parameterized Constructor  They take certain arguments within them. These arguments are used to initialise the variables defined within the class.  Operator Overloading  cpp-programming/operator-overloading\n  This allows us to change the way operators work. However this doesn’t work with fundamental data types like int, float and char . Syntax:  returnType operator symbol (arguments) { ... .. ... }  Here return type is the value to be returned while operator is a keyword. Symbol takes values like +,-,*,/ and arguments take the operands. Unary operators like ++ or -- can be a void with no argument type. For postfix (++value) function we have the following syntax.. void operator ++(int)  Structure vs Class A structure is a value type so it is stored on the stack, but a class is a reference type and is stored on the heap. A structure doesn\u0026rsquo;t support inheritance, and polymorphism, but a class supports both. By default, all the struct members are public but class members are by default private in nature.\nC++ Pointers  cpp-programming/pointers\n  Pointer stores the address of a variable. int* ptr, p ..here ptr is of the type int* while p is of the type int * is used to dereference pointers and to access the value at that address.  C++ Memory Management  cpp-programming/memory-management\n  Keywords new and delete are used to allocate and deallocate the memory dynamically new operator  This operator allocates memory to the variable. Syntax: ptr_name = new data type   Delete operator  It deallocates the memory, that is, it returns back to the operating system. Syntax: delete ptr_name    C++ Inheritance  cpp-programming/inheritance\n  Allows us to create new class from the base class The derived class has access to all the elements of the base class. It has access to all the features of the base class and can add its own feature as well We can use keyword public, private and protected while inheriting the class  Syntax: class Dog : public Animal {...}; is-a relationship  Inheritance can be used only if is-a relationship is present  C++ protected members  Like private members, protected members are inaccessible outside of the class. However, they are accessible by derived and friend classes It is used if we want data to not be accessed outside the class but still be accessed by derived class Moreover, private members from the base class cannot be directly used in the derived classes.  Access Modes Public  The members of the base class are inherited by derived class just as the members are  Private  All the members of the base class becomes private members in derived class  Protected  The public members of the base class becomes the protected members of the derived class   Note that private members of the base class remain as private members of the private class in all the access modes.\n  Member function overriding in inheritance  It may happen that the base class and the inherited class have the member functions with the same name. In that case,if a variable is called then the access mode of the derived class is invoked first.    Function Overloading  cpp-programming/function-overriding\n  If the same function is defined in both- base as well as the derived class and we call that function, then the function of the derived class is executed. To access the overridden function of the base class we use the scope resolution operator. For instance Base:: is used to access members of the base class. A pointer of the base type can also be used for that purpose.  Types of Inheritance  cpp-programming/multilevel-multiple-inheritance\n Multilevel Inheritance  In a program we can also derive a class from the derived class  Multiple Inheritance  In a program, a class can be derived from more than one parent/base class If a function is overridden in both the parent classes, then our program throws compilation error as it doesn’t know which function to execute. However this can be resolved using scope resolution.  Hierarchical Inheritance  If more than one class is inherited from a base class, it is called hierarchical inheritance.  Friend Function and classes  cpp-programming/friend-function-class\n Friend Function  These functions can access the public as well as the private data members of the class. It is defined with the keyword friend.. Syntax: friend returnType functionName(arguments);  Friend Class  When a class is declared as a friend class, all the member functions of the friend class become friend functions. All the members of the base class are accessible under this friend class.   Syntax: friend class ClassB;  However, we cannot access members of the friend class from the base class as friendship in C++ is one way only.  Virtual Functions  cpp-programming/virtual-functions\n  A virtual function is used in the base class to ensure that function is overridden in the derived class. Thus if we try to access any member function of the base class using base pointer, then also we will get the overridden function written in the derived class. Syntax:(written in base class)  virtual void print() { // code  }  C++ override identifier (which is written with the derived class member functions) is used to indicate which function will override the base class function. This ensures that the compiler pops out an error if the derived class function does not meet the function requirements of the base class function. Note that we can still access the base function using scope resolution.  C++ Polymorphism  cpp-programming/polymorphism\n  This means that a given variable or function behaves differently in different scenarios.  Function Overloading  We can use same functions with same name but different arguments(different argument type, return type, argument number) It is a compiler-time polymorphism because the compiler knows which function to execute even before the program is compiled.  Operator Overloading  We can operate operator as long as we are operating on user defined structures and objects It is a compiler-time polymorphism because the compiler knows which function to execute even before the program is compiled.  Function Overriding  A function of the base class can be overridden by the function in the derived class It is a run-time polymorphism as the function call is not resolved by the compiler but is resolved during the runtime  Virtual Functions  They ensure that the function in the base class is overridden even if we access the function by base pointer. It is a run-time polymorphism as the function call is not resolved by the compiler but is resolved during the runtime  C++ Templates  cpp-programming/templates\n  We can create a single function using multiple data-types  Function Templates  Declaration:  template class T T someFunction(T arg) { ... .. ... }  Keyword typename can be used instead of class  Class Templates  Creating class object as : classname \u0026lt; dataype\u0026gt; objectname Declaration : template\u0026lt;classT\u0026gt;  class className { ... .. ... public: T var; T someOperation(T arg); ... .. … }; ","permalink":"https://sanchit-sinha.github.io/logBook/posts/programming-language/basics-of-c++/","summary":"Short Notes regarding C++ and OOPs","title":"Basics of C++"},{"content":"Web Scrapping # Scrapping website can be done using - # 1) API # 2) Web Scrapping using html STEP 0) Install all the dependencies  pip install requests pip install bs4 pip install html5lib  import requests from bs4 import BeautifulSoup url=\u0026#34;https://www.codewithharry.com\u0026#34; STEP 1) Get the html r = requests.get(url) htmlContent = r.content # print(htmlContent) STEP 2) Parse the html soup = BeautifulSoup(htmlContent,\u0026#39;html.parser\u0026#39;) # print(soup.prettify) STEP 3) Html tree traversals  Commonly used type of objects : i) Tag : print(type(title)) ii) Navigable String : print(type(title.string)) iii) BeautifulSoup : print(type(soup)) iv) Comment  # Using comment object markup=\u0026#34;\u0026lt;p\u0026gt;\u0026lt;!--this is a comment--\u0026gt;\u0026lt;/p\u0026gt;\u0026#34; soup2 = BeautifulSoup(markup) print(soup2.p) print(type(soup2.p)) print(soup2.p.string) print(type(soup2.p.string)) # Get the title of the Html page  title = soup.title #Get all the paragraphs from the page  paras = soup.find_all(\u0026#39;p\u0026#39;) print(paras) # Get first element in the HTML page print(soup.find(\u0026#39;p\u0026#39;)) #Get classes of any element in the HTML page  print(soup.find(\u0026#39;p\u0026#39;)[\u0026#39;class\u0026#39;]) #find all the elements with class lead  print(soup.find_all(\u0026#34;p\u0026#34; , class_=\u0026#34;lead\u0026#34;)) #Get the text from any tags/soup print(soup.find(\u0026#39;p\u0026#39;).get_text()) #Get all the text from HTML print(soup.get_text()) #Get all the anchor tags from the page  anchors = soup.find_all(\u0026#39;a\u0026#39;) # print(anchors) all_links = set() #Get all the links on the page for link in anchors: if(link.get(\u0026#39;href\u0026#39;) != \u0026#39;#\u0026#39;): linkText = \u0026#34;https://codewithharry.com\u0026#34;+link.get(\u0026#39;href\u0026#39;) all_links.add(linkText) # print(linkText) for link in all_links: print(link) navbarSupportedContent = soup.find(id=\u0026#39;navbarSupportedContent\u0026#39;) # .contents - A tag\u0026#39;s children are available as a list(is stored in memory) # .children - A tag\u0026#39;s children are available as a generator ( can be iterated and is fast in case of big sites) for elem in navbarSupportedContent.contents: print(elem) for elem in navbarSupportedContent.children: print(elem) #Using strings for items in navbarSupportedContent.strings: print(items) #Beautifully arranging the strings  for items in navbarSupportedContent.stripped_strings: print(items) #Printing the parent tag of a tag print(navbarSupportedContent.parent) # A generator object is formed on printing using parents which shows it is iteratable print(navbarSupportedContent.parents) for item in navbarSupportedContent.parents: print(item) # Prints all the parent of the children  for item in navbarSupportedContent.parents: print(item.name) #next_sibling and previous_sibling  print(navbarSupportedContent.next_sibling) #Empty spaces and new lines are also considered as siblings print(navbarSupportedContent.next_sibling.next_sibling ) print(navbarSupportedContent.previous_sibling) #Empty spaces and new lines are also considered as siblings print(navbarSupportedContent.previous_sibling.previous_sibling) #Getting an ID elem = soup.select(\u0026#39;#loginmodel\u0026#39;) print(elem) #Getting an class elem = soup.select(\u0026#39;.loginmodel\u0026#39;) print(elem) ","permalink":"https://sanchit-sinha.github.io/logBook/posts/skills/web-scrapping/","summary":"Short Notes regarding Web Scrapping","title":"Web Scrapping"},{"content":"Bash Script BASIC COMMANDS:  ls lists all files ls -al lists a long list containing several information for file man -manual for a command..eg man ls ctrl+x exit from file or to stop a command ctrl+c kills the current process cd / -go to the root directory cd ~ go to the user directory cd - go to the previous directory UP and DOWN arrow keys can help navigate through previously used commands history command gives us the list of previously used commands grep command can be piped with various other commands using \u0026ldquo;|\u0026rdquo; :: eg  history | grep git , find / -name \u0026#34;folder_name\u0026#34; 2\u0026gt;/dev/null | grep $USER NAVIGATION: In order to change directory, we can use absolute or relative paths for acessing directories\n cd directories path: moves to the respective directory cd .. move to the previous directory  FILE HANDLING  touch: Creating a new file. eg touch a.cpp mv prev new: Renaming a new file that is move the file to new file rm file name: Permanently deleting a file cat filename: Viewing the contents of a file cat prev_file \u0026gt; new_file : creates a new file with file name new_file and with content as that of prev_file nano file_name: helps creates a new_file with name \u0026quot; file_name\u0026quot; and to edit it  FINDING INFORMATION  mkdir dir_name : creates a folder in the respective directory with name \u0026ldquo;dir_name\u0026rdquo; mv dir1 dir2 : moves folder namrd \u0026ldquo;dir1\u0026rdquo; to folder named \u0026ldquo;dir2\u0026rdquo; rmdir dir_name : deletes a directly only if its empty rm -ir dir_name : helps to delete first the contents in the directory and then the directory itself recursively find / -name \u0026quot;folder_name\u0026quot; : if called from the root directory,it searches all the files and folders to get folder named \u0026ldquo;folder_name\u0026rdquo; find / -name \u0026quot;folder_name\u0026quot; 2\u0026gt;/dev/null : helps search for folder named \u0026ldquo;folder_name\u0026rdquo; by skipping all the error messages We can use * in file or folders name while looking for it if we are not sure of the prefixes or suffixes grep name: this command can help search through the contents of the file using regular expressions. It searches for \u0026ldquo;name\u0026rdquo; in all the contents  ALIASES They are shortcut for long codes. We can create our own aliases in any file named for eg.my_aliases..then we have to write the code in it in proper syntax. After that we will have to run the source command for shell to recognize our file and then use our shortcuts :)\nTAKING INPUT AND WRITING OUTPUT ./a.out \u0026lt; input.txt \u0026gt; output.txt ","permalink":"https://sanchit-sinha.github.io/logBook/posts/skills/basics-of-bash/","summary":"Short Notes regarding bash","title":"Basics of bash"},{"content":"-I\u0026rsquo;ll be using VScode for building up my Django-Project -The integrated terminal really helped me in this\n These django steps would be with respect to the steps I followed in order to learn Django and create my very own blog\n SETTING UP VIRTUAL ENVIRONMENT FOR USING DJANGO  First of all install a virtual environment for using Django. Activate the virtual environment using . env/bin/activate  CREATING FOLDER FOR STORING YOUR DJANGO PROJECT Make a folder that should contain your project.. FOR EG: Folder named \u0026quot;BLOG\u0026quot;  STARTING WITH YOUR DJANGO-PROJECT  Reference- Video2 of Django Playlist of The Net Ninja:\n Move to your required folder .. cd Blog Type the following command in the terminal django-admin startproject projectname - This would create a folder named foldername with required materials present in it  FOR EG: django-admin startproject BlogMaterials Move into your folder created using django-admin startproject say \u0026ldquo;BlogMaterials\u0026rdquo; using cd foldername RUN-SERVER You can create your own server and view your project-works over there  Run : python manage.py runserver USING URLs and Views File in your Django-Project folder  Reference- Video3 of Django-Playlist of The Net Ninja\n  Create a file named views.py in the folder containing your urls.py file We can add html links to our project in the urls.py and the respective functions to be rendered by clicking them in our views.py file\n  Add urls to your urls.py file Firstly import views by typing : from. import views in your urls.py file\n FOR EG: path('about/',views.about), : The \u0026quot;about\u0026quot; link would be created and about function would be requested when clicked over it    Define your required function in the view.py file Firstly import the following files : Type \u0026ldquo;from django.http import HttpResponse\u0026rdquo; in view.py file\nFOR EG : def about(request): return HttpResponse(\u0026quot;about\u0026quot;)  The above function prints \u0026ldquo;about\u0026rdquo; on the page when request is sent to the required page\n  Run server and view your project so far Code : python manage.py runserver\n  USING HTMLTemplates in urls.py and views.py file  Reference- Video4 of Django-Playlist of The Net Ninja\n Create a \u0026ldquo;templates\u0026rdquo; folder in the main folder that is \u0026ldquo;BlogMaterials\u0026rdquo;. Add homepage.html and about.html in this \u0026ldquo;templates\u0026rdquo; folder and add html content in it which you want to be displayed over the browser Add path of template folder in settings.py file. Open settings.py and move to the section named TEMPPLATES Under the TEMPLATES section add the relative path of your template folder in \u0026ldquo;DIRS\u0026rdquo; part // It will look under temmplate folder of each app Change the respective functions in views.py file FOR EG : Firstly import the following in your views.py files  from django.shortcuts import render def about(request): return render(request,\u0026#39;about.html) Run server to and view the respective changes  Using Django Apps  Reference- Video5 of Django-Playlist of The Net Ninja\n  MAIN FRAMEWORK :  Django project  Djangonautic Apps articles app accounts app\n( BlogMaterials)      Run:  python manage.py startapp articles  This creates articles folder along with required files  Register this articles folder in the settings.py file in the main folder under the INSTALLED_APPS section Create urls.py file in articles folder in the main folder of Django Project You can copy paste your urls.py file in this articles folder as well. Remove the lines containing admin from the urls.py file in this folder as those are not required Create a template folder in this main articles folder and create another aricles folder under this template folder . Store your respective html files in this folder say : article_list.html Add path of urls.py file of abouts folder in the urls.py file of your main folder(\u0026ldquo;BLogMaterials\u0026rdquo;) so that the server knows that the urls.py file of articles file could be used EG : Add the following code in path : Firstly import \u0026ldquo;include\u0026rdquo; using the following code :  from django.conf.urls import url,include Then under the urlpatterns section write the following code :\npath(\u0026#39;articles/\u0026#39;,include(articles.urls)), In the views.py file of the articles folder define the functions that we want to get rendered EG :  def article_list(request): return render(request,\u0026#39;articles/article_list.html\u0026#39;) Run the server and view the necessary changes  MODELS  Reference- Video6 of Django-Playlist of The Net Ninja Models : It contains the tables and names that are to be displayed in the database\n Open models.py file in the articles app and make a class in there. FOR EG:  class Articles(models.Model): title=models.CharField(max_length=100) slug=models.SlugField() body=models.TextField() date=models.DateTimeField(auto_now_add=True) MIGRATIONS  Reference- Video7 of Django-Playlist of The Net Ninja Connects the database and the models.py file\n Firstly migrate unmigrated files by running the following commands : python manage.py migrate Create a migration file that will store changes related to migrations(made by us) Create it running the following command: python manage.py makemigrations \u0026mdash; This creates a 0001_initial.py file under migrations folder in articles app folder To migrate the migrations made by us , run the following command: python manage.py migrate\n\u0026mdash; This moves the model to database  USING DJANGO ORM  Reference- Video8 of Django-Playlist of The Net Ninja This helps to interact with the database\n Run python manage.py shell   Opens up an interactive shell to interact with the database using django codes  Firstly, we would need to import Articles in shell using the following command:  from articles.models import Articles (from outer folder name.model file name import Class_Name) 30)Some commands to be used in the shell\n Articles.objects.all() // Lists the articles present in the database Create a new Article using the following command in shell article = Articles() Input the title in the article using the following command article.title = \u0026ldquo;hello world\u0026rdquo; save this article to the database using the following command- article.save() Various articles created manually are stores in the form of arrays - For EG: To access the first article run the following command - Articles.objects.all()[0]  // Inorder to show the title pf the article objects in ORM : -: Open the models.py file -: add the following function under the class of Articles-\ndef __str__(self): return self.title USING DJANGO ADMIN  Reference- Video9 of Django-Playlist of The Net Ninja \u0026mdash; Used to fill database and control usage of our model\n Create the admin user(super user) using manage.py Run the following command - python manage.py createsuperuser  enter your details : User Name : abc Email ID : xyz@gmail.com Password : xxx In order to view your articles in the admins page, we need to register it in the admins.py file under articles app Firstly import the following -  from .models import Articles admin.site.register(Articles) Run the server and go to the admin webpage   We can see all other staff members registered under here along with the super user(green tick user) and our articles etc as well.  INSERTING PYTHON CODES IN HTML TEMPLATES USING TEMPLATE TAGS  Reference- Video10 of Django-Playlist of The Net Ninja\n  We want to dynamically input all the articles in the models.py file to our webpage Template tags are use to use python codes in out html files In html files we use {% %} for writing codes and {{ }} for outputting any data  Under the views.py file import Articles class from models.py file using the following code -  from .models import Articles Under the article_list function, pass the class Articles as a dictionary so that it can be used in the asrticle_list template  FOR EG: def article_list(request): # order all the articles present in the database by date  list_of_articles = Articles.object.all().order_by(\u0026#34;date\u0026#34;) return render(request,\u0026#39;articles/article_list.html\u0026#39;,{\u0026#34;articles\u0026#34;:list_of_articles}) Open article_list.html under the templates folder in articles app In the article_list.html we can use {% %} for writing python codes and ({ }) for outputting any python code \u0026mdash; Iterate through the dictionary_of_articles passed and print title,vody and date of each article using the following code in the body tag of html file  \u0026lt;div class=\u0026#34;articles\u0026#34;\u0026gt; {% for article in dictionary_of_articles %} \u0026lt;div class=\u0026#34;article\u0026#34;\u0026gt; \u0026lt;h2\u0026gt; a href=\u0026#34;#\u0026#34;\u0026gt; {{ article.title }} \u0026lt;/a\u0026gt; \u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt; {{ article.body }} \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; {{ article.date }} \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; {% endfor %} \u0026lt;/div\u0026gt; Run the server and view the necessary changes made  USING MODEL METHODS  Reference- Video11 of Django-Playlist of The Net Ninja We dont want to list complete information over the articles page at one go\n Open the models.py file under the articles folder and define the following function to display the first fifty characters on the articles webpage  def snippets(self): return self.body[:50] #dislpays the first fifty characters over the Blogs first page In the article_list.html in the templates folder of the articles app, instead of printing article.body print article.snippets  Working with static files that is css files etc  Reference- Video12 of Django-Playlist of The Net Ninja\n We can allow Django to save our staticfiles In the urls.py file under the BlogMaterials folder, add the following code - Firstly import the following  -from django.contrib.staticfiles.urls import staticfiles_urlpatterns #Then write the following below url_patterns  urlpatterns += staticfiles_urlpatterns() In the settings.py file Under the \u0026ldquo;STATIC_URL\u0026rdquo; value static would be present   Now you can find your static files over the webpage . FOR EG: style.css can be found over ..../static/style.css  In the settings.py file add STATICFILES_DIRS at the bottom(just below STATIC_URLS) and write the following there   firstly import os in settings.py file then,  STATICFILES_DIRS=( os.path.join(BASE_DIR,\u0026#39;assets\u0026#39;), #Join the base_dir ectory(here BLogMaterials) and the assets folder containing the static files ) Create a folder named assets under your base directory(BlogMaterials) and enter static files such as styles.css over there In order to connect this styles.css with the articles_list.html connect it using  \u0026lt;link rel = \u0026#34;stylesheet\u0026#34; href=\u0026#34;/static/styles.css\u0026#34;\u0026gt;  A better way to load styles.css or other staticfiles in the html file is using the templates tags  Write {% load static %} # above Doctype(at top of html file)  # Then ,write the following  \u0026lt;link rel = \u0026#34;stylesheet\u0026#34; href=\u0026#34;{% static \u0026#39;styles.css\u0026#39; %}\u0026#34;\u0026gt;  This will ensure that whenever the directory for staticfiles are changed we dont have to re write the directory name at every required place  Build up your styles.css file and run server to view the changes made  Extending template tags to be used in combining html files  Reference- Video13 of Django-Playlist of The Net Ninja\n Create a base_layout for html files which is to be used by all other html files in the main directory(BlogMaterial/templates) \u0026ndash; Open the templates folder under articles and create a base_layout html file with template tag as shown below. All other html files should only start and end at the area between these template tags eg :  {% load static %} \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;ARTICLES\u0026lt;/title\u0026gt; \u0026lt;link rel = \u0026#34;stylesheet\u0026#34; href=\u0026#34;{% static \u0026#39;styles.css\u0026#39; %}\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;wrapper\u0026#34;\u0026gt; {% block content %} {% endblock %} \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Now all other html files will have this basic tempplate if it uses it eg :  Articles_list.html in artilces/templates folder {% extends \u0026#39;base_layout.html\u0026#39; %} {% block content %} \u0026lt;h1\u0026gt;ARTICLES LIST\u0026lt;/h1\u0026gt; \u0026lt;div class=\u0026#34;articles\u0026#34;\u0026gt; {% for article in dictionary_of_articles %} \u0026lt;div class=\u0026#34;article\u0026#34;\u0026gt; \u0026lt;h2\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt; {{ article.title }} \u0026lt;/a\u0026gt; \u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt; {{ article.snippets }} \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; {{ article.date }} \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; {% endfor %} \u0026lt;/div\u0026gt; {% endblock %}  We need to mention the above mentioned template tag if we want to extend it from the base_layout.html  {% extends \u0026#39;base_layout.html\u0026#39; %}  The extended code is written between two template tags that is {% block content %} and {% endblock %} which also present in the base_layout.html file  Using url parameters and RegeX  Reference- Video14 of Django-Playlist of The Net Ninja\n In views.py file under articles folder define function to see the article response after importing HttpResponse from django  from django.http import HttpResponse def article_details(request,slug): return HttpResponse(slug) In urls.py file under the articles folder under the urlpatterns section write the following code  re_path(r\u0026#39;^(?P\u0026lt;slug\u0026gt;[\\w-]+)/$\u0026#39;, views.article_detail), # after importing repath from django  # We can also use regex instead :  re_path(r\u0026#39;^(?P\u0026lt;slug\u0026gt;[\\w-]+)/$\u0026#39;, views.article_detail), NAMED URLs(URL TAGS and URL NAMES)  Reference- Video15 of Django-PLaylist of The Net Ninja Changing the links to which the page directs on clicking a respective article.: This is done using named URLs.\n Under the urls.py file in the articles folder add names to the respective urls  # contains the index page in #articles  path(\u0026#39;\u0026#39;,views.article_list, name=\u0026#34;list\u0026#34; ), # re_path(r\u0026#39;^(?P\u0026lt;slug\u0026gt;[\\w-]+)/$\u0026#39;, views.article_detail), re_path(r\u0026#39;^(?P\u0026lt;slug\u0026gt;[\\w-]+)/$\u0026#39;, views.article_detail, name=\u0026#34;detail\u0026#34;),  Also, add a namespace above say app_name = 'articles'  as this will prevent the names list and details to be used by different urls.py file  Under the base_layout.html(in Templates folder) within the wrapper code add the following line,  \u0026lt;h1\u0026gt; \u0026lt;a href=\u0026#34;{% url \u0026#39;articles:list\u0026#39; %}\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;{% static \u0026#39;logo.png\u0026#39; %}\u0026#34;\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; Under the article_list.html in articles folder , add the following line (replacing #)  Replace # with \u0026#34;{% url\u0026#39;articles:detail\u0026#39; article.slug%}\u0026#34; Run the server to view the changes made  ","permalink":"https://sanchit-sinha.github.io/logBook/posts/skills/working-with-django/","summary":"Setting up and using Django for the first time","title":"Working with Django"},{"content":"PHP Basic use of operators \u0026lt;?php echo \u0026#34;Hello World - Printed using php\u0026#34;; // dynamically allocated variables  $variable1 = 4; $variable2 = 5; echo $variable1; echo $variable2; echo $variable1 + $variable2; Echo $variable1 + $variable2; // Operators in PHP  // Arithmrtic Operators  echo \u0026#34;\u0026lt;h1\u0026gt;Arithmetic Operators\u0026lt;/h1\u0026gt;\u0026#34;; echo \u0026#34;Addition \u0026lt;br\u0026gt;\u0026#34;; echo $variable1 + $variable2; echo \u0026#34;Sybtraction \u0026lt;br\u0026gt;\u0026#34;; echo $variable1 - $variable2; echo \u0026#34;Multiplication \u0026lt;br\u0026gt;\u0026#34;; echo $variable1 * $variable2; echo \u0026#34;Division \u0026lt;br\u0026gt;\u0026#34;; echo $variable1 / $variable2; echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; // Assignment Operators  echo \u0026#34;\u0026lt;h1\u0026gt;Assignment Operators\u0026lt;/h1\u0026gt;\u0026#34;; echo \u0026#34;The first variable was \u0026#34;; echo $variable1; echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; echo \u0026#34;The second variable was \u0026#34;; echo $variable2; echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; $newvariable=$variable1; echo \u0026#34;The new variable is \u0026#34;; echo $newvariable; echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; // $newvariable /= 2;  // $newvariable *= 2;  $newvariable *= 2; echo $newvariable; // Comparison Operators  echo \u0026#34;\u0026lt;h1\u0026gt; Comparison Operators\u0026lt;/h1\u0026gt;\u0026#34;; echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; echo \u0026#34;The value of 1 == 4 is \u0026#34;; echo var_dump(1 == 4); echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; echo \u0026#34;The value of 1 != 4 is \u0026#34;; echo var_dump(1 != 4); echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; echo \u0026#34;The value of 1 \u0026gt;= 4 is \u0026#34;; echo var_dump(1 \u0026gt;= 4); echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; echo \u0026#34;The value of 1 \u0026lt;= 4 is \u0026#34;; echo var_dump(1 \u0026lt;= 4); echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; // Increment/Decrement Operators  echo \u0026#34;\u0026lt;h1\u0026gt; Increment/Decrement Operators \u0026lt;/h1\u0026gt; \u0026lt;br\u0026gt; \u0026#34;; $new_variable = 5; echo \u0026#34;The variable is \u0026#34;; echo $new_variable; echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; ++$new_variable; echo $new_variable; echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; --$new_variable; --$new_variable; echo $new_variable; echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; $new_variable++; $new_variable++; echo $new_variable; echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; $new_variable--; $new_variable--; echo $new_variable; echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; // Logical Operators  // and (\u0026amp;\u0026amp;)  // or (||)  // xor (^)  // not (!)  echo \u0026#34;\u0026lt;h1\u0026gt; Logical Operators \u0026lt;/h1\u0026gt;\u0026#34;; echo var_dump(true \u0026amp;\u0026amp; true); echo var_dump(true and false); echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; echo var_dump(true || false); echo var_dump(true or true); echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; $my_var = 2^4; echo $my_var; echo var_dump(2 xor 6 ); ?\u0026gt;Datatypes \u0026lt;?php define(\u0026#34;PI\u0026#34; , 3.14); // Datatypes in php  // 1. String  // 2. Integer  // 3. Float  // 4. Boolean  // 5. Array  // 6. Object  echo \u0026#34;\u0026lt;h1\u0026gt; DATA - TYPES \u0026lt;/h1\u0026gt;\u0026#34;; $new_string = \u0026#34;This is a string\u0026#34;; echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; echo var_dump($new_string); echo \u0026#39;\u0026lt;br\u0026gt;\u0026#39;; $new_string = 67; echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; echo var_dump($new_string); echo \u0026#39;\u0026lt;br\u0026gt;\u0026#39;; $new_string = 67.23; echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; echo var_dump($new_string); echo \u0026#39;\u0026lt;br\u0026gt;\u0026#39;; $new_string = true; echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; echo var_dump($new_string); // constants  // defined on top;  echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; echo PI; echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; ?\u0026gt;Basic use of Arrays and loops \u0026lt;?php echo \u0026#34;\u0026lt;h1\u0026gt; If else \u0026lt;/h1\u0026gt;\u0026#34;. \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; $age = 6; if($age\u0026gt;18){ echo \u0026#34;You can go to the party\u0026#34;; } else if($age==7){ echo \u0026#34;You are 7 years old\u0026#34;; } else if($age==6){ echo \u0026#34;You are 6 years old\u0026#34;; } else{ echo \u0026#34;You can not go to the party\u0026#34;; } echo \u0026#34;\u0026lt;h1\u0026gt;ARRAYS\u0026lt;/h1\u0026gt;\u0026#34;.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; // Arrays in php  $languages = array(\u0026#34;Python\u0026#34;, \u0026#34;C++\u0026#34;, \u0026#34;php\u0026#34;, \u0026#34;NodeJs\u0026#34;); // echo count($languages);  // echo $languages[0];  echo \u0026#34;\u0026lt;h1\u0026gt;LOOPS\u0026lt;/h1\u0026gt;\u0026#34;.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; // Loops in PHP  $a = 0; while ($a \u0026lt;= 10) { echo \u0026#34;\u0026lt;br\u0026gt;The value of a is: \u0026#34;; echo $a; $a++; } // Iterating arrays in PHP using while loop  $a = 0; while ($a \u0026lt; count($languages)) { echo \u0026#34;\u0026lt;br\u0026gt;The value of language is: \u0026#34;; echo $languages[$a]; $a++; } echo \u0026#34;\u0026lt;h1\u0026gt;WHILE LOOP\u0026lt;/h1\u0026gt;\u0026#34;.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; // Do while loop  $a = 200; do { echo \u0026#34;\u0026lt;br\u0026gt;The value of a is: \u0026#34;; echo $a; $a++; } while ($a \u0026lt; 10); echo \u0026#34;\u0026lt;h1\u0026gt;USING FOR LOOP\u0026lt;/h1\u0026gt;\u0026#34;.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; // For loop  for ($a=60; $a \u0026lt; 10; $a++) { echo \u0026#34;\u0026lt;br\u0026gt;The value of a from the for loop is: \u0026#34;; echo $a; } echo \u0026#34;\u0026lt;h1\u0026gt;USING FOREACH\u0026lt;/h1\u0026gt;\u0026#34;.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; foreach ($languages as $value) { echo \u0026#34;\u0026lt;br\u0026gt;The value from foreach loop is \u0026#34;; echo $value; } echo \u0026#34;\u0026lt;h1\u0026gt;USING FUNCTIONS\u0026lt;/h1\u0026gt;\u0026#34;.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; function print5(){ echo \u0026#34;FIVE\u0026#34;; } print5(); print5(); print5(); print5(); function print_number($number){ echo \u0026#34;\u0026lt;br\u0026gt;Your number is \u0026#34;; echo $number; } print_number(45); print_number(435); print_number(5); ?\u0026gt;Strings \u0026lt;?php $str = \u0026#34;This this this\u0026#34;; echo \u0026#34;\u0026lt;h1\u0026gt;CONCATENING TWO STRINGS USING .\u0026lt;/h1\u0026gt;\u0026#34;.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; echo $str. \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; echo \u0026#34;\u0026lt;h1\u0026gt;CALCULATING THE LENGTH OF THE STRING \u0026lt;/h1\u0026gt;\u0026#34;.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; $lenn = strlen($str); echo \u0026#34;The length of this string is \u0026#34;. $lenn . \u0026#34;. Thank you \u0026lt;br\u0026gt;\u0026#34;; echo \u0026#34;\u0026lt;h1\u0026gt;CALCULATING THE NUMBER OF WORDS IN A STRING\u0026lt;/h1\u0026gt;\u0026#34;.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; echo \u0026#34;The number of words in this string is \u0026#34;. str_word_count($str) . \u0026#34;. Thank you \u0026lt;br\u0026gt;\u0026#34;; echo \u0026#34;\u0026lt;h1\u0026gt;REVERSING THE STRING\u0026lt;/h1\u0026gt;\u0026#34;.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; echo \u0026#34;The reversed string is \u0026#34;. strrev($str) . \u0026#34;. Thank you \u0026lt;br\u0026gt;\u0026#34;; echo \u0026#34;\u0026lt;h1\u0026gt;FINDING A SUBSTRING IN A STRING\u0026lt;/h1\u0026gt;\u0026#34;.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; echo \u0026#34;The search for is in this string is \u0026#34;. strpos($str, \u0026#34;is\u0026#34;) . \u0026#34;. Thank you \u0026lt;br\u0026gt;\u0026#34;; echo \u0026#34;\u0026lt;h1\u0026gt;REPLACING ONE SUBSTRING OF STRING WITH ANOTHER\u0026lt;/h1\u0026gt;\u0026#34;.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; echo \u0026#34;The replaced string is \u0026#34;. str_replace(\u0026#34;is\u0026#34;, \u0026#34;at\u0026#34;, $str) . \u0026#34;. Thank you \u0026lt;br\u0026gt;\u0026#34;; // echo $lenn;  ?\u0026gt;","permalink":"https://sanchit-sinha.github.io/logBook/posts/skills/basics-of-php/","summary":"Short Notes regarding PHP","title":"Basics of PHP"}]